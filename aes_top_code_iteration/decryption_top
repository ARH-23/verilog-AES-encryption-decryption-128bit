`timescale 1ns / 1ps
module decryption_top(
    input sys_clk_de,
    input sys_rst_n_de,
    input text_en,
    input [127:0]key_128,
    input [127:0]plaintext,
    output [127:0]de_msg
    );
    parameter ROUND_COUT=9;
    reg [3:0]rcnt;
    reg [127:0] msg_deal;
    wire [127:0]msg_deal_next;
    reg [127:0]key_in;
    wire [127:0] key1,key2,key3,key4,key5,key6,key7,key8,key9,key10;
    wire [127:0]sr1;
    wire [127:0]sb1;
 //   wire [127:0]final;
    //解密需要先生成10轮密钥
    round_key11 r1(key_128,key1,key2,key3,key4,key5,key6,key7,key8,key9,key10);
    //计算轮次依次传输密钥
    always @(posedge sys_clk_de or negedge sys_rst_n_de)
    //解密开始信号，传入密钥为key10
        if(!sys_rst_n_de)
        key_in<=128'h0;
        else if(text_en) 
        key_in <= key8; 
        else
         key_in <= frcon(rcnt);   
   //轮次更新            
    always @(posedge sys_clk_de or negedge sys_rst_n_de)
     if(!sys_rst_n_de)
         rcnt <=  4'h0;
        else if(text_en)      
         rcnt <=  4'h0;
        else if(rcnt<ROUND_COUT+1)
         rcnt <=  rcnt + 4'h1;
         else
          rcnt <=  4'h0 ;
 //更新plain_state       
 wire [127:0]pass_msg;
 assign pass_msg=sb1^key9;
      always @(posedge sys_clk_de or negedge sys_rst_n_de) 
          begin    
               if(!sys_rst_n_de)
                   msg_deal<=128'h0;
               else if(text_en)        
                   msg_deal <= pass_msg;
              else if(rcnt!=0)    
                   msg_deal <= msg_deal_next;//前一轮的结果更新到下一轮
              else                    
                   msg_deal <=  msg_deal;
          end     
//第一轮解密
    inv_shift_row de_sh_first(plaintext^key10,sr1);
    inv_sub_byte de_sub_first(sr1,sb1); 
    //循环轮次
    decryption_loop de_top(.key_in(key_in),.text_in(msg_deal),.text_out(msg_deal_next),.rcont(rcnt));
    assign de_msg =(rcnt==4'ha)?msg_deal:de_msg;
 //   assign de_msg=final; 
function [127:0]	frcon;
    input    [3:0]    i;
    case(i)    // synopsys parallel_case
       4'h0: frcon=key8;
       4'h1: frcon=key7;
       4'h2: frcon=key6;
       4'h3: frcon=key5;
       4'h4: frcon=key4;
       4'h5: frcon=key3;
       4'h6: frcon=key2;
       4'h7: frcon=key1;
       4'h8: frcon=key_128;
       default: frcon=128'b0;
    endcase
endfunction     
endmodule
